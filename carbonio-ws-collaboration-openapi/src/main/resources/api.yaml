# SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

openapi: 3.0.3
info:
  title: Zextras Carbonio Workstream Collaboration API
  description: Zextras Carbonio Workstream Collaboration HTTP APIs definition.
  version: 1.6.2
  contact:
    email: smokybeans@zextras.com

servers:
  - url: http://localhost:10000

tags:
  - name: Rooms
  - name: Members
  - name: Users
  - name: Attachments
  - name: Health
  - name: Authentication
  - name: Meetings

paths:
  /health:
    get:
      tags:
        - Health
      summary: Returns the general service status
      operationId: getHealthStatus
      responses:
        200:
          $ref: '#/components/responses/200HealthStatusResponse'
  /health/live:
    get:
      tags:
        - Health
      summary: Returns 204 if the service is alive
      operationId: isLive
      responses:
        204:
          $ref: '#/components/responses/204IsLiveResponse'
  /health/ready:
    get:
      tags:
        - Health
      summary: Returns 204 if the service is ready to receive requests
      operationId: isReady
      responses:
        204:
          $ref: '#/components/responses/204IsReadyResponse'
        429:
          $ref: '#/components/responses/429IsReadyResponse'
        500:
          $ref: '#/components/responses/500IsReadyResponse'
  /rooms:
    get:
      tags:
        - Rooms
      summary: Retrieves a list of every room the user has access to
      operationId: listRooms
      parameters:
        - $ref: '#/components/parameters/queryRoomsExtraFields'
      responses:
        200:
          $ref: '#/components/responses/200ListRoomsResponse'
    post:
      tags:
        - Rooms
      summary: Insert a room of the specified type
      description: |
        Inserts a room of the specified type. The user performing the request will be included in the final members
        list if not specified. If the room is a one-to-one, only a single member can be specified and name and
        description are replaced with an empty string. If the room is not a one-to-one,
        there must be at least two members specified.
      operationId: insertRoom
      requestBody:
        $ref: '#/components/requestBodies/InsertRoomRequest'
      responses:
        201:
          $ref: '#/components/responses/201InsertRoomResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        409:
          $ref: '#/components/responses/409Conflict'
  /rooms/{roomId}:
    get:
      tags:
        - Rooms
      summary: Retrieves the requested room
      operationId: getRoom
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        200:
          $ref: '#/components/responses/200GetRoomResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    put:
      tags:
        - Rooms
      summary: Updates a room information
      operationId: updateRoom
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRoomRequest'
      responses:
        200:
          $ref: '#/components/responses/200UpdateRoomResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    delete:
      tags:
        - Rooms
      summary: Deletes the specified room
      operationId: deleteRoom
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteRoomResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
  /rooms/{roomId}/picture:
    get:
      tags:
        - Rooms
      summary: Retrieves the room picture
      operationId: getRoomPicture
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        200:
          $ref: '#/components/responses/200GetRoomPictureResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    put:
      tags:
        - Rooms
      summary: Uploads and sets a new room picture
      operationId: updateRoomPicture
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/headerFileName'
        - $ref: '#/components/parameters/headerMimeType'
        - $ref: '#/components/parameters/headerContentLength'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRoomPictureRequest'
      responses:
        204:
          $ref: '#/components/responses/204UpdateRoomPictureResponse'
    delete:
      tags:
        - Rooms
      summary: Delete the room picture
      operationId: deleteRoomPicture
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteRoomPictureResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /rooms/{roomId}/mute:
    put:
      tags:
        - Rooms
      summary: Mutes notification for the specified room
      operationId: muteRoom
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        204:
          $ref: '#/components/responses/204MuteRoomResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    delete:
      tags:
        - Rooms
      summary: Unmutes notification for the specified room
      operationId: unmuteRoom
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        204:
          $ref: '#/components/responses/204UnmuteRoomResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /rooms/{roomId}/clear:
    put:
      tags:
        - Rooms
      summary: Clears all messages for the specified room
      operationId: clearRoomHistory
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        200:
          $ref: '#/components/responses/200ClearRoomResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /rooms/{roomId}/members:
    get:
      tags:
        - Members
      summary: Retrieves every member to the given room
      operationId: listRoomMembers
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        200:
          $ref: '#/components/responses/200ListRoomMembersResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    post:
      tags:
        - Rooms
        - Members
      summary: Add or invite the specified users to the room
      description: |
        Add the specified users to the room. This can only be performed by an owner of the given room
      operationId: insertRoomMembers
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      requestBody:
        $ref: '#/components/requestBodies/InsertRoomMembersRequest'
      responses:
        201:
          $ref: '#/components/responses/200InsertRoomMembersResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
  /rooms/{roomId}/members/{userId}:
    delete:
      tags:
        - Members
      summary: Removes a member from the room
      description: |
        Removes a member from the specified room. If the specified user is different from
        the requester, this action is considered as a kick
      operationId: deleteRoomMember
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/pathUserId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteRoomMemberResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
  /rooms/{roomId}/members/{userId}/owner:
    put:
      tags:
        - Members
      summary: Promotes a member to owner
      operationId: insertOwner
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/pathUserId'
      responses:
        204:
          $ref: '#/components/responses/204InsertOwnerResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
    delete:
      tags:
        - Members
      summary: Demotes a member from owner to normal member
      operationId: deleteOwner
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/pathUserId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteOwnerResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
  /rooms/{roomId}/members/owners:
    put:
      tags:
        - Rooms
        - Members
      summary: Update existing room owners
      operationId: updateRoomOwners
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRoomOwnersRequest'
      responses:
        201:
          $ref: '#/components/responses/200UpdateRoomOwnersResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /rooms/{roomId}/meeting:
    get:
      tags:
        - Meetings
        - Rooms
      summary: Retrieves the meeting associated with the requested room
      operationId: getMeetingByRoomId
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      responses:
        200:
          $ref: '#/components/responses/200GetRoomMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /users:
    get:
      tags:
        - Users
      summary: Retrieves users
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/queryUserIds'
      responses:
        200:
          $ref: '#/components/responses/200GetUsersByIdsResponse'
  /users/capabilities:
    get:
      tags:
        - Users
      summary: Retrieve current user capabilities
      operationId: getCapabilities
      responses:
        200:
          $ref: '#/components/responses/200GetCapabilities'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Retrieves a user
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/pathUserId'
      responses:
        200:
          $ref: '#/components/responses/200GetUserResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /rooms/{roomId}/attachments:
    get:
      tags:
        - Rooms
        - Attachments
      summary: Retrieves paged list of metadata of every attachment uploaded to the room  and the filter for the next page
      operationId: listRoomAttachmentsInfo
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/queryPageItemsNumber'
        - $ref: '#/components/parameters/queryPageFilter'
      responses:
        200:
          $ref: '#/components/responses/200ListRoomAttachmentsInfoResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    post:
      tags:
        - Rooms
        - Attachments
      summary: Insert an attachment
      operationId: insertAttachment
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
        - $ref: '#/components/parameters/headerFileName'
        - $ref: '#/components/parameters/headerMimeType'
        - $ref: '#/components/parameters/headerDescription'
        - $ref: '#/components/parameters/headerMessageId'
        - $ref: '#/components/parameters/headerReplyId'
        - $ref: '#/components/parameters/headerArea'
        - $ref: '#/components/parameters/headerContentLength'
      requestBody:
        $ref: '#/components/requestBodies/InsertAttachmentRequest'
      responses:
        201:
          $ref: '#/components/responses/201InsertAttachmentResponse'
        413:
          $ref: '#/components/responses/413PayloadTooLargeResponse'
    put:
      tags:
        - Rooms
        - Attachments
      summary: Insert an attachment with multipart/form-data
      operationId: insertAttachmentMultipart
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      requestBody:
        $ref: '#/components/requestBodies/InsertAttachmentRequestMultipart'
      responses:
        201:
          $ref: '#/components/responses/201InsertAttachmentResponse'
  /rooms/{roomId}/forward:
    post:
      tags:
        - Rooms
        - Attachments
      summary: Message forwarding
      operationId: forwardMessages
      parameters:
        - $ref: '#/components/parameters/pathRoomId'
      requestBody:
        $ref: '#/components/requestBodies/ForwardMessagesRequest'
      responses:
        204:
          $ref: '#/components/responses/204ForwardMessagesResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /attachments/{fileId}:
    delete:
      tags:
        - Attachments
      summary: Deletes an uploaded attachment
      operationId: deleteAttachment
      parameters:
        - $ref: '#/components/parameters/pathFileId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteAttachmentResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
    get:
      tags:
        - Attachments
      summary: Retrieves info related to an uploaded attachment
      operationId: getAttachmentInfo
      parameters:
        - $ref: '#/components/parameters/pathFileId'
      responses:
        200:
          $ref: '#/components/responses/200GetAttachmentInfoResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /attachments/{fileId}/download:
    get:
      tags:
        - Attachments
      summary: Retrieves an uploaded attachment
      operationId: getAttachment
      parameters:
        - $ref: '#/components/parameters/pathFileId'
      responses:
        200:
          $ref: '#/components/responses/200GetAttachmentResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /preview/image/{fileId}/{area}/:
    get:
      tags:
        - Preview
      summary: Get image preview
      description: |
        Creates and returns a preview of the image fetched by id
        with the given size, quality and format
        - **fileId**: UUID of the image
        - **quality**: quality of the output image
        (the higher you go the slower the process)
        - **output_format**: format of the output image
        - **area**: width of the output image (>=0) x
        height of the output image (>=0), width x height => 100x200.
        The first is width, the latter height, the order is important!
        - **crop**: True will crop the picture starting from the borders.
        This option will lose information, leaving it False will scale and
        have borders to fill the requested size.
      operationId: getImagePreview
      parameters:
        - $ref: '#/components/parameters/pathFileId'
        - $ref: '#/components/parameters/pathPreviewArea'
        - $ref: '#/components/parameters/queryImageQuality'
        - $ref: '#/components/parameters/queryImageType'
        - $ref: '#/components/parameters/queryImageCrop'
      responses:
        200:
          $ref: '#/components/responses/200PreviewFileResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /preview/image/{fileId}/{area}/thumbnail:
    get:
      tags:
        - Preview
      summary: Get image thumbnail
      description: |
        Creates and returns a preview of the image fetched by id
        with the given size, quality and format
        - **fileId**: UUID of the image
        - **quality**: quality of the output image
        (the higher you go the slower the process)
        - **output_format**: format of the output image
        - **area**: width of the output image (>=0) x
        height of the output image (>=0), width x height => 100x200.
        The first is width, the latter height, the order is important!
        - **shape**: Rounded and Rectangular are currently supported.
      operationId: getImageThumbnail
      parameters:
        - $ref: '#/components/parameters/pathFileId'
        - $ref: '#/components/parameters/pathPreviewArea'
        - $ref: '#/components/parameters/queryImageQuality'
        - $ref: '#/components/parameters/queryImageType'
        - $ref: '#/components/parameters/queryImageShape'
      responses:
        200:
          $ref: '#/components/responses/200PreviewFileResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /preview/pdf/{fileId}/:
    get:
      tags:
        - Preview
      summary: Get pdf preview
      description: |
        Creates and returns a preview of the pdf fetched by id,
        the pdf file will contain the first and last page given. With default values
        it will return a pdf with all the pages.
        - **fileId**: UUID of the pdf
        - **first_page**: integer value of first page to preview (n>=1)
        - **last_page**: integer value of last page to preview (0 = last of the original pdf)
      operationId: getPdfPreview
      parameters:
        - $ref: '#/components/parameters/pathFileId'
        - $ref: '#/components/parameters/queryFirstPage'
        - $ref: '#/components/parameters/queryLastPage'
      responses:
        200:
          $ref: '#/components/responses/200PreviewFileResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /preview/pdf/{fileId}/{area}/thumbnail:
    get:
      tags:
        - Preview
      summary: Get pdf thumbnail
      description: |
        Creates and returns a preview of the pdf fetched by id
        with the given size, quality and format
        - **fileId**: UUID of the pdf
        - **quality**: quality of the output image
        (the higher you go the slower the process)
        - **output_format**: format of the output image
        - **area**: width of the output image (>=0) x
        height of the output image (>=0), width x height => 100x200.
        The first is width, the latter height, the order is important!
        - **shape**: Rounded and Rectangular are currently supported.
      operationId: getPdfThumbnail
      parameters:
        - $ref: '#/components/parameters/pathFileId'
        - $ref: '#/components/parameters/pathPreviewArea'
        - $ref: '#/components/parameters/queryImageQuality'
        - $ref: '#/components/parameters/queryImageType'
        - $ref: '#/components/parameters/queryImageShape'
      responses:
        200:
          $ref: '#/components/responses/200PreviewFileResponse'
        400:
          $ref: '#/components/responses/400BadRequestResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /auth/token:
    get:
      tags:
        - Authentication
      summary: Fetches the authenticated token
      operationId: getToken
      responses:
        200:
          $ref: '#/components/responses/200GetTokensResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings:
    get:
      tags:
        - Meetings
      summary: Retrieves a list of every meeting the user has access to
      operationId: listMeeting
      responses:
        200:
          $ref: '#/components/responses/200ListMeetingResponse'
    post:
      tags:
        - Meetings
      summary: Creates a new meeting
      operationId: createMeeting
      requestBody:
        $ref: '#/components/requestBodies/CreateMeetingRequest'
      responses:
        200:
          $ref: '#/components/responses/200CreateMeetingResponse'
  /meetings/{meetingId}:
    get:
      tags:
        - Meetings
      summary: Retrieves the requested meeting
      operationId: getMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200GetMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    delete:
      tags:
        - Meetings
      summary: Deletes the requested meeting
      operationId: deleteMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/start:
    post:
      tags:
        - Meetings
      summary: Starts the current meeting
      operationId: startMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200StartMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/stop:
    post:
      tags:
        - Meetings
      summary: Stops the current meeting
      operationId: stopMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200StopMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/join:
    post:
      tags:
        - Meetings
      summary: Adds the current user to the specified meeting
      operationId: joinMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/JoinMeetingRequest'
      responses:
        200:
          $ref: '#/components/responses/200JoinMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/leave:
    post:
      tags:
        - Meetings
      summary: Remove the current user to the specified meeting
      operationId: leaveMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        204:
          $ref: '#/components/responses/204LeaveMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media:
    put:
      tags:
        - Meetings
      summary: Update media stream status for the current session
      operationId: updateMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204MediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media/answer:
    put:
      tags:
        - Meetings
      summary: Complete WebRTC negotiation for media streams for the current session
      operationId: answerRtcMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/RtcMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204AnswerMediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media/subscribe:
    put:
      tags:
        - Meetings
      summary: Update subscriptions of the current session to the desired media streams
      operationId: updateSubscriptionsMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateMediaStreamSubscriptionsRequest'
      responses:
        204:
          $ref: '#/components/responses/204SubscribeMediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/audio:
    put:
      tags:
        - Meetings
      summary: Update audio stream status for a user, a moderator can disable audio for another user
      operationId: updateAudioStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateAudioStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204AudioStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/audio/offer:
    put:
      tags:
        - Meetings
      summary: Start WebRTC negotiation for audio stream for the current session
      operationId: offerRtcAudioStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/RtcMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204OfferAudioStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/hand:
    put:
      tags:
        - Meetings
      summary: Update hand status for a user during a meeting, a moderator can lower down the hand for another user
      operationId: updateHandStatus
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateHandStatusRequest'
      responses:
        204:
          $ref: '#/components/responses/204HandStatusResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
components:
  parameters:
    pathRoomId:
      in: path
      name: roomId
      description: room identifier
      schema:
        type: string
        format: uuid
      required: true
    pathMeetingId:
      in: path
      name: meetingId
      description: meeting identifier
      schema:
        type: string
        format: uuid
      required: true
      allowEmptyValue: false
    pathUserId:
      in: path
      name: userId
      description: user identifier
      schema:
        type: string
        format: uuid
      required: true
      allowEmptyValue: false
    pathFileId:
      in: path
      name: fileId
      description: file identifier
      schema:
        type: string
        format: uuid
      required: true
    pathPreviewArea:
      in: path
      name: area
      schema:
        title: Area
        type: string
      required: true
    queryImageQuality:
      in: query
      name: quality
      schema:
        $ref: '#/components/schemas/ImageQualityEnum'
    queryImageType:
      in: query
      name: output_format
      schema:
        allOf:
          - $ref: '#/components/schemas/ImageTypeEnum'
      required: false
    queryImageCrop:
      in: query
      name: crop
      schema:
        title: Crop
        type: boolean
        default: false
      required: false
    queryImageShape:
      in: query
      name: shape
      schema:
        allOf:
          - $ref: '#/components/schemas/ImageShapeEnum'
        default: Rectangular
      required: false
    queryFirstPage:
      in: query
      name: firstPage
      schema:
        title: FirstPage
        type: integer
      required: false
    queryLastPage:
      in: query
      name: lastPage
      schema:
        title: LastPage
        type: integer
      required: false

    headerFileName:
      in: header
      name: fileName
      description: file name encoded to unicode
      schema:
        type: string
      required: true
    headerMimeType:
      in: header
      name: mimeType
      description: content type
      schema:
        type: string
      required: true
    headerContentLength:
      in: header
      name: Content-Length
      description: content length
      schema:
        type: integer
        format: int64
      required: true
    headerDescription:
      in: header
      name: description
      description: description encoded to unicode
      schema:
        type: string
      required: false
    headerMessageId:
      in: header
      name: messageId
      description: description
      schema:
        type: string
      required: false
    headerReplyId:
      in: header
      name: replyId
      description: identifier of the message being replied to
      schema:
        type: string
      required: false
    headerArea:
      in: header
      name: area
      description: attachment's area
      schema:
        type: string
      required: false
    queryPageItemsNumber:
      in: query
      name: itemsNumber
      description: number of page items
      schema:
        type: integer
        default: 10
      required: false
    queryPageFilter:
      in: query
      name: filter
      description: pagination filter
      schema:
        type: string
      required: false
    queryRoomsExtraFields:
      in: query
      name: extraFields
      description: Rooms extra fields
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RoomExtraField'
      required: false
    queryUserIds:
      in: query
      name: userIds
      description: List of ids (max 10) of the users to retrieve
      required: true
      schema:
        type: array
        maxItems: 10
        items:
          type: string
  requestBodies:
    InsertRoomRequest:
      description: room to insert
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoomCreationFields'
    UpdateRoomRequest:
      description: room fields to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoomEditableFields'
    UpdateRoomPictureRequest:
      description: image to set
      required: true
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    InsertRoomMembersRequest:
      description: members to add or invite
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MembersToInsert'
    UpdateRoomOwnersRequest:
      description: members to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Members'
    InsertAttachmentRequest:
      description: file stream
      required: true
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    InsertAttachmentRequestMultipart:
      description: Attachment upload form data
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            description: Fields for inserting an attachment
            properties:
              file:
                type: string
                format: binary
                description: file to upload
              description:
                type: string
                description: description encoded to unicode
              messageId:
                type: string
                description: identifier of the message
              replyId:
                type: string
                description: identifier of the message being replied to
              area:
                type: string
                description: area of the attachment
              contentLength:
                type: integer
                format: int64
                description: content length
            required:
              - file
    ForwardMessagesRequest:
      description: Messages forwarding request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForwardMessagesList'
    JoinMeetingRequest:
      description: user request containing its streams settings to join a meeting
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JoinSettings'
    CreateMeetingRequest:
      description: Data to create a new meeting
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewMeetingData'
    UpdateMediaStreamRequest:
      description: user request to update a media stream status
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MediaStreamSettings'
    UpdateAudioStreamRequest:
      description: user request to update a meeting stream status
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioStreamSettings'
    RtcMediaStreamRequest:
      description: user request to send a rtc session description related to media stream for WebRTC negotiation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionDescriptionProtocol'
    UpdateMediaStreamSubscriptionsRequest:
      description: user request to update subscriptions to the desired media stream
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpdates'
    UpdateHandStatusRequest:
      description: user request to update hand status during a meeting
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HandStatus'
  responses:
    200HealthStatusResponse:
      description: General status of the service and its dependencies
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthStatus'
    204IsLiveResponse:
      description: The service is alive
    204IsReadyResponse:
      description: The service is ready to receive requests
    429IsReadyResponse:
      description: The service is ready but some non-fundamental dependencies are not reachable
    500IsReadyResponse:
      description: The service is not yet ready to receive requests
    200ListRoomsResponse:
      description: List of every room that the user has access to
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Room'
    201InsertRoomResponse:
      description: The newly created room
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
    200GetRoomResponse:
      description: Requested room
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
    200UpdateRoomResponse:
      description: Updated room
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
    204DeleteRoomResponse:
      description: Room was deleted correctly or it never existed
    200GetRoomPictureResponse:
      description: The requested picture
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    204UpdateRoomPictureResponse:
      description: Room picture was changed correctly
    204DeleteRoomPictureResponse:
      description: Room picture was deleted correctly
    204MuteRoomResponse:
      description: Room was muted correctly
    204UnmuteRoomResponse:
      description: Room was unmuted correctly
    200ClearRoomResponse:
      description: Cleaning date of messages
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClearedDate'
    200ListRoomMembersResponse:
      description: The room members list
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Member'
    200InsertRoomMembersResponse:
      description: The members added or invited
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MembersInserted'
    200UpdateRoomOwnersResponse:
      description: The list of the room members updated
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Member'
    204DeleteRoomMemberResponse:
      description: The member was deleted correctly or it never existed
    204InsertOwnerResponse:
      description: The member was promoted
    204DeleteOwnerResponse:
      description: The member was demoted
    200GetCapabilities:
      description: User capabilities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capabilities'
    200GetUserResponse:
      description: Requested user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    200GetUsersByIdsResponse:
      description: The requested users list
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    201InsertAttachmentResponse:
      description: File identifier
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Id'
    200ListRoomAttachmentsInfoResponse:
      description: Paged list of metadata of every attachment uploaded to the room
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttachmentsPagination'
    204DeleteAttachmentResponse:
      description: The file was deleted correctly
    200GetAttachmentInfoResponse:
      description: Attachment informations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachment'
    200GetAttachmentResponse:
      description: The requested file
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    200PreviewFileResponse:
      description: The preview of the requested file
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    200GetTokensResponse:
      description: The authenticated tokens.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    200GetRoomMeetingResponse:
      description: Gets the requested meeting data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    204ForwardMessagesResponse:
      description: successfully forwarded the messages
    200CreateMeetingResponse:
      description: The meeting just created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200ListMeetingResponse:
      description: List of every meeting that the user has access to
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Meeting'
    200JoinMeetingResponse:
      description: The result of the join operation for the meeting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JoinMeetingResult'
    200GetMeetingResponse:
      description: Gets the requested meeting data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200StartMeetingResponse:
      description: The meeting was started successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200StopMeetingResponse:
      description: The meeting was stopped successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    204UpdateQueuedUserResponse:
      description: The queued user was updated successfully
    204DeleteMeetingResponse:
      description: The meeting was deleted successfully
    204LeaveMeetingResponse:
      description: The user exited the meeting successfully
    204AudioStreamResponse:
      description: The status of audio stream changed successfully
    204OfferAudioStreamResponse:
      description: The offer related to the audio stream has been processed and sent successfully
    204MediaStreamResponse:
      description: The status of media stream changed successfully
    204AnswerMediaStreamResponse:
      description: The answer related to the media stream has been processed and sent successfully
    204SubscribeMediaStreamResponse:
      description: The user subscribed to media streams successfully
    204HandStatusResponse:
      description: The hand action has been performed successfully
    400BadRequestResponse:
      description: The request had wrong or missing parameters
    401UnauthorizedResponse:
      description: User not authorized
    403ForbiddenResponse:
      description: The requester could not access the resource
    404NotFoundResponse:
      description: The requested resource was not found
    409Conflict:
      description: The request conflict with the current state
    413PayloadTooLargeResponse:
      description: The request had a payload that was too big
    502BadGatewayResponse:
      description: The service was unavailable
  schemas:
    Error:
      type: object
      description: Error object returned from requests with developer mode active
      properties:
        traceId:
          type: string
          description: random hash used to identify the error within logs
          readOnly: true
        message:
          type: string
          description: a message describing the error
          readOnly: true
    HealthStatus:
      type: object
      description: Health status of the service and its dependencies
      properties:
        isLive:
          type: boolean
          description: describes if the service is alive
          readOnly: true
        status:
          $ref: '#/components/schemas/HealthStatusType'
        dependencies:
          type: array
          description: health of this service dependencies
          items:
            $ref: '#/components/schemas/DependencyHealth'
    HealthStatusType:
      type: string
      description: Health status types
      enum:
        - ok
        - warn
        - error
    DependencyHealth:
      type: object
      description: Health status of a service dependency
      properties:
        name:
          $ref: '#/components/schemas/DependencyHealthType'
        isHealthy:
          type: boolean
          description: whether the dependency is available and operative
          readOnly: true
    DependencyHealthType:
      type: string
      description: Health dependency types
      enum:
        - database
        - xmpp_server
        - event_dispatcher
        - storage_service
        - previewer_service
        - authentication_service
        - profiling_service
        - videoserver_service
    Id:
      type: object
      description: Identifier object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: identifier
      required: [ id ]
    ClearedDate:
      type: object
      properties:
        clearedAt:
          type: string
          format: date-time
          readOnly: true
          description: date since messages were cleared
      required: [ clearedAt ]
    Capabilities:
      type: object
      properties:
        canSeeMessageReads:
          type: boolean
          description: indicates whether it can see if the messages have been read
        canSeeUsersPresence:
          type: boolean
          description: indicates whether it can see the presence of the other users
        canVideoCall:
          type: boolean
          description: indicates whether it can access video calls
        canUseVirtualBackground:
          type: boolean
          description: indicates whether it can use a virtual background
        editMessageTimeLimitInMinutes:
          type: integer
          description: limit of minutes within which a message can be edited
        deleteMessageTimeLimitInMinutes:
          type: integer
          description: limit of minutes within which a message can be deleted
        maxGroupMembers:
          type: integer
          description: maximum number of users who can be members of a group
        maxRoomImageSizeInKb:
          type: integer
          description: maximum size for a room image in kB
        maxUserImageSizeInKb:
          type: integer
          description: maximum size for a user image in kB
      required:
        - canSeeMessageReads
        - canSeeUsersPresence
        - canVideoCall
        - canVideoCallRecord
        - canUseVirtualBackground
        - editMessageTimeLimitInMinutes
        - deleteMessageTimeLimitInMinutes
        - maxGroupMembers
        - maxRoomImageSizeInKb
        - maxUserImageSizeInKb
    User:
      type: object
      description: User data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: user's id
        email:
          type: string
          format: email
          readOnly: true
          description: user's email
        name:
          type: string
          readOnly: true
          description: user's name
        statusMessage:
          type: string
          description: the user's status message
      required: [ id, email, name ]
    RoomType:
      type: string
      description: Managed room types
      enum:
        - group
        - one_to_one
        - temporary
    RoomEditableFields:
      type: object
      description: Room fields that can be updated
      properties:
        name:
          type: string
          description: room name
          minLength: 1
          maxLength: 128
        description:
          type: string
          minLength: 0
          maxLength: 256
          description: room description
    RoomCreationFields:
      type: object
      description: Room fields for its creation
      allOf:
        - $ref: '#/components/schemas/RoomEditableFields'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/RoomType'
      properties:
        members:
          items:
            $ref: '#/components/schemas/Member'
          description: list of users to add to the room
      required: [ type ]
    Room:
      type: object
      description: Room data
      allOf:
        - $ref: '#/components/schemas/RoomCreationFields'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              description: room identifier
            meetingId:
              type: string
              format: uuid
              readOnly: true
              description: identifier of associated meeting
            createdAt:
              type: string
              format: date-time
              readOnly: true
              description: entity creation date
            updatedAt:
              type: string
              format: date-time
              readOnly: true
              description: entity update date
            pictureUpdatedAt:
              type: string
              format: date-time
              readOnly: true
              description: |
                room profile picture update timestamp,
                returned only if the room picture was set at least once
            userSettings:
              $ref: '#/components/schemas/RoomUserSettings'
      required: [ id, createdAt, updatedAt ]
    RoomUserSettings:
      type: object
      description: Preferences that an user has set for a room
      properties:
        muted:
          type: boolean
          description: indicates whether the user has muted
        clearedAt:
          type: string
          format: date-time
          description: |
            room clear history date,
            returned only if the room clear history has been cleared at least once
      required: [ muted, clearedAt ]
    RoomExtraField:
      type: string
      description: Room extra fields
      enum:
        - members
        - settings
    Members:
      type: array
      description: room member list
      items:
        $ref: '#/components/schemas/Member'
    Member:
      type: object
      description: Information about a user's role in the room
      properties:
        userId:
          type: string
          format: uuid
          description: user identifier
        owner:
          type: boolean
          default: false
          description: indicates whether it is the owner
      required: [ userId ]
    MembersToInsert:
      type: array
      description: members to insert in the room
      items:
        $ref: '#/components/schemas/MemberToInsert'
    MemberToInsert:
      type: object
      description: Information about the members to insert in the room
      allOf:
        - $ref: '#/components/schemas/Member'
        - type: object
          properties:
            historyCleared:
              type: boolean
              default: false
              description: |
                indicates whether it can see previous messages,
                after it has been added to the room
          required: [ userId, owner, historyCleared ]
    MembersInserted:
      type: array
      description: members inserted in the room
      items:
        $ref: '#/components/schemas/MemberInserted'
    MemberInserted:
      type: object
      description: Information about the member to inserted in the room
      allOf:
        - $ref: '#/components/schemas/Member'
        - type: object
          properties:
            clearedAt:
              type: string
              format: date-time
              description: |
                room clear history timestamp,
                returned only if the room history has been cleared at least once
          required: [ userId, owner, clearedAt ]
    Attachment:
      type: object
      description: Attachment of a message
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: identifier
        name:
          type: string
          description: file name
        size:
          type: integer
          format: int64
          readOnly: true
          description: file length
        mimeType:
          type: string
          readOnly: true
          description: mime type
        userId:
          type: string
          format: uuid
          readOnly: true
          description: identifier of updated user
        roomId:
          type: string
          format: uuid
          readOnly: true
          description: identifier of destination room
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: creation date
        area:
          type: string
          readOnly: true
          description: attachment's area
      required: [ id, name, size, mimeType, userId, roomId ]
    AttachmentsPagination:
      type: object
      description: Attachment pagination
      properties:
        filter:
          type: string
          description: filter for the next page
        attachments:
          type: array
          description: paged list of attachments metadata
          items:
            $ref: '#/components/schemas/Attachment'
    Token:
      type: object
      description: authenticated tokens
      properties:
        zmToken:
          type: string
          description: ZM token
    ImageQualityEnum:
      title: ImageQualityEnum
      enum:
        - Lowest
        - Low
        - Medium
        - High
        - Highest
      type: string
      description: Class representing all the image quality accepted values
    ImageTypeEnum:
      title: ImageTypeEnum
      enum:
        - Jpeg
        - Png
        - Gif
      type: string
      description: Class representing all the image type accepted values
    ImageShapeEnum:
      title: ImageShapeEnum
      enum:
        - Rounded
        - Rectangular
      type: string
      description: Class representing all the image shape accepted values
    ForwardMessagesList:
      type: array
      description: Room data
      items:
        $ref: '#/components/schemas/ForwardMessage'
    ForwardMessage:
      type: object
      description: Message to forward
      properties:
        originalMessage:
          type: string
          description: XML message to forward
        originalMessageSentAt:
          type: string
          format: date-time
          description: date and time the original message was sent
        description:
          type: string
          description: description of the forwarded message
      required: [ originalMessage ]
    NewMeetingData:
      type: object
      properties:
        name:
          type: string
        roomId:
          type: string
          format: uuid
        meetingType:
          $ref: '#/components/schemas/MeetingType'
        expiration:
          description: 'This field is only used for scheduled meetings to indicate when the meeting will
            no more be necessary'
          type: string
          format: date-time
      required: [ name, meetingType ]
    JoinMeetingResult:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/JoinStatus'
    MeetingUser:
      type: object
      description: Defines a user in the access list of a meeting
      properties:
        userId:
          type: string
          format: uuid
          description: user identifier
        userType:
          $ref: '#/components/schemas/MeetingUserType'
    MeetingType:
      type: string
      description: 'Defines the type of meeting, if permanent it will never be automatically deleted,
        if scheduled it will be removed after the expiration is passed'
      enum:
        - permanent
        - scheduled
    MeetingUserType:
      type: string
      enum:
        - moderator
        - registered
    JoinStatus:
      type: string
      enum:
        - ACCEPTED
    Participant:
      description: Meeting participant data
      allOf:
        - $ref: '#/components/schemas/MeetingUser'
        - type: object
          properties:
            queueId:
              type: string
              readOnly: true
              description: Reference to the user queue of the user
            audioStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the audio stream status
            videoStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the video stream status
            screenStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the screen share stream status
            joinedAt:
              type: string
              format: date-time
              readOnly: true
              description: participant joining timestamp
            handRaisedAt:
              type: string
              format: date-time
              readOnly: true
              description: participant hand raising timestamp
    Meeting:
      type: object
      description: Meeting data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: meeting identifier
        name:
          type: string
          description: The meeting name
        roomId:
          type: string
          format: uuid
          readOnly: true
          description: room identifier
        active:
          description: Indicates if the meeting is active
          type: boolean
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: entity creation date
        startedAt:
          type: string
          format: date-time
          readOnly: true
          description: meeting starting time
        meetingType:
          $ref: '#/components/schemas/MeetingType'
    JoinSettings:
      type: object
      description: user's streams settings to join a meeting
      properties:
        audioStreamEnabled:
          type: boolean
          default: false
          description: indicates the audio stream status to join the meeting
        videoStreamEnabled:
          type: boolean
          default: false
          description: indicates the video stream status to join the meeting
      required: [ audioStreamEnabled, videoStreamEnabled ]
    MediaStreamSettings:
      type: object
      description: settings to apply on user's media stream
      properties:
        type:
          type: string
          description: indicates the media stream type
          enum:
            - video
            - screen
        enabled:
          type: boolean
          description: indicates the status to change the media stream to
        sdp:
          type: string
          description: indicates the descriptor of the session
      required: [ type, enabled ]
    AudioStreamSettings:
      type: object
      description: settings to apply on user's audio stream
      properties:
        enabled:
          type: boolean
          description: indicates the status to change the audio stream to
        userToModerate:
          type: string
          description: optional user to mute if i'm a moderator, only works if enabled is false
      required: [ enabled ]
    SessionDescriptionProtocol:
      type: object
      description: contains sdp descriptor needed for a media stream to perform WebRTC negotiation
      properties:
        sdp:
          type: string
          description: indicates the descriptor of the session
      required: [ sdp ]
    SubscriptionUpdates:
      type: object
      description: subscriptions updates related to media streams
      properties:
        subscribe:
          type: array
          description: indicates the media streams which user wants to subscribe to
          items:
            $ref: '#/components/schemas/MediaStream'
        unsubscribe:
          type: array
          description: indicates the media streams which user wants to unsubscribe to
          items:
            $ref: '#/components/schemas/MediaStream'
      required: [ subscribe, unsubscribe ]
    MediaStream:
      type: object
      description: representation of meeting media stream
      properties:
        userId:
          type: string
          description: user identifier which owns the related media stream
        type:
          type: string
          description: indicates the media stream type
          enum:
            - video
            - screen
      required: [ userId, type ]
    HandStatus:
      type: object
      description: the hand action the user wants to perform
      properties:
        raised:
          type: boolean
          description: indicates the status to change the hand to
        userToModerate:
          type: string
          description: optionally lower the user's hand if I'm a moderator, only works if raised is false
      required: [ raised ]
