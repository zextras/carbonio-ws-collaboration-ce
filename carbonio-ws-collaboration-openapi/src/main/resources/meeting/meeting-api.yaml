# SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

openapi: 3.0.3
info:
  title: Zextras Carbonio Workstream Collaboration Meeting Api
  description: Zextras Carbonio Workstream Collaboration Meeting HTTP APIs definition.
  version: 1.1.0
  contact:
    email: smokybeans@zextras.com
servers:
  - url: http://localhost:10000
tags:
  - name: Meetings
paths:
  /public/meetings/{meetingId}:
    get:
      tags:
        - Meetings
      summary: Retrieves public data of the meeting
      operationId: getMeetingPublic
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200GetPublicMeetingResponse'
  /meetings:
    get:
      tags:
        - Meetings
      summary: Retrieves a list of every meeting the user has access to
      operationId: listMeeting
      responses:
        200:
          $ref: '#/components/responses/200ListMeetingResponse'
    post:
      tags:
        - Meetings
      summary: Creates a new meeting
      operationId: createMeeting
      requestBody:
        $ref: '#/components/requestBodies/CreateMeetingRequest'
      responses:
        200:
          $ref: '#/components/responses/200CreateMeetingResponse'
  /meetings/{meetingId}:
    get:
      tags:
        - Meetings
      summary: Retrieves the requested meeting
      operationId: getMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200GetMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
    delete:
      tags:
        - Meetings
      summary: Deletes the requested meeting
      operationId: deleteMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        204:
          $ref: '#/components/responses/204DeleteMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/start:
    post:
      tags:
        - Meetings
      summary: Starts the current meeting
      operationId: startMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200StartMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/stop:
    post:
      tags:
        - Meetings
      summary: Stops the current meeting
      operationId: stopMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200StopMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/join:
    post:
      tags:
        - Meetings
      summary: Adds the current user to the specified meeting
      operationId: joinMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/JoinMeetingRequest'
      responses:
        200:
          $ref: '#/components/responses/200JoinMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/leave:
    post:
      tags:
        - Meetings
      summary: Remove the current user to the specified meeting
      operationId: leaveMeeting
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        204:
          $ref: '#/components/responses/204LeaveMeetingResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/queue:
    get:
      tags:
        - Meetings
      summary: Retrieve the list of people in queue for the meeting
      operationId: getQueue
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      responses:
        200:
          $ref: '#/components/responses/200QueueResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/queue/{userId}:
    post:
      tags:
        - Meetings
      summary: Updates the status of a queued user
      operationId: updateQueuedUser
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
        - $ref: '#/components/parameters/pathUserId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateQueuedUserRequest'
      responses:
        204:
          $ref: '#/components/responses/204UpdateQueuedUserResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media:
    put:
      tags:
        - Meetings
      summary: Update media stream status for the current session
      operationId: updateMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204MediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media/answer:
    put:
      tags:
        - Meetings
      summary: Complete WebRTC negotiation for media streams for the current session
      operationId: answerRtcMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/RtcMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204AnswerMediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/media/subscribe:
    put:
      tags:
        - Meetings
      summary: Update subscriptions of the current session to the desired media streams
      operationId: updateSubscriptionsMediaStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateMediaStreamSubscriptionsRequest'
      responses:
        204:
          $ref: '#/components/responses/204SubscribeMediaStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/audio:
    put:
      tags:
        - Meetings
      summary: Update audio stream status for a user, a moderator can disable audio for another user
      operationId: updateAudioStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateAudioStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204AudioStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'
  /meetings/{meetingId}/audio/offer:
    put:
      tags:
        - Meetings
      summary: Start WebRTC negotiation for audio stream for the current session
      operationId: offerRtcAudioStream
      parameters:
        - $ref: '#/components/parameters/pathMeetingId'
      requestBody:
        $ref: '#/components/requestBodies/RtcMediaStreamRequest'
      responses:
        204:
          $ref: '#/components/responses/204OfferAudioStreamResponse'
        401:
          $ref: '#/components/responses/401UnauthorizedResponse'
        403:
          $ref: '#/components/responses/403ForbiddenResponse'
        404:
          $ref: '#/components/responses/404NotFoundResponse'

components:
  parameters:
    pathMeetingId:
      in: path
      name: meetingId
      description: meeting identifier
      schema:
        type: string
        format: uuid
      required: true
      allowEmptyValue: false
    pathUserId:
      in: path
      name: userId
      description: user identifier
      schema:
        type: string
        format: uuid
      required: true
      allowEmptyValue: false
  requestBodies:
    JoinMeetingRequest:
      description: user request containing its streams settings to join a meeting
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JoinSettings'
    CreateMeetingRequest:
      description: Data to create a new meeting
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewMeetingData'
    UpdateMediaStreamRequest:
      description: user request to update a media stream status
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MediaStreamSettings'
    UpdateAudioStreamRequest:
      description: user request to update a meeting stream status
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioStreamSettings'
    RtcMediaStreamRequest:
      description: user request to send a rtc session description related to media stream for WebRTC negotiation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionDescriptionProtocol'
    UpdateMediaStreamSubscriptionsRequest:
      description: user request to update subscriptions to the desired media stream
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionUpdates'
    UpdateQueuedUserRequest:
      description: request to approve or reject a user inside a meeting
      required: true
      content:
       application/json:
         schema:
            $ref: '#/components/schemas/QueuedUserUpdate'
  responses:
    200CreateMeetingResponse:
      description: The meeting just created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200ListMeetingResponse:
      description: List of every meeting that the user has access to
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Meeting'
    200JoinMeetingResponse:
      description: The result of the join operation for the meeting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JoinMeetingResult'
    200GetMeetingResponse:
      description: Gets the requested meeting data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200GetPublicMeetingResponse:
      description: Gets the public data of a meeting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublicMeeting'
    200StartMeetingResponse:
      description: The meeting was started successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200StopMeetingResponse:
      description: The meeting was stopped successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    200QueueResponse:
      description: The list of queued users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueuedUsers'
    204UpdateQueuedUserResponse:
      description: The queued user was updated successfully
    204DeleteMeetingResponse:
      description: The meeting was deleted successfully
    204LeaveMeetingResponse:
      description: The user exited the meeting successfully
    204AudioStreamResponse:
      description: The status of audio stream changed successfully
    204OfferAudioStreamResponse:
      description: The offer related to the audio stream has been processed and sent successfully
    204MediaStreamResponse:
      description: The status of media stream changed successfully
    204AnswerMediaStreamResponse:
      description: The answer related to the media stream has been processed and sent successfully
    204SubscribeMediaStreamResponse:
      description: The user subscribed to media streams successfully

    400BadRequestResponse:
      description: The request had wrong or missing parameters
    401UnauthorizedResponse:
      description: User not authorized
    403ForbiddenResponse:
      description: The requester could not access the resource
    404NotFoundResponse:
      description: The requested resource was not found
    409Conflict:
      description: The request conflict with the current state
  schemas:
    NewMeetingData:
      type: object
      properties:
        name:
          type: string
        roomId:
          type: string
          format: uuid
        meetingType:
          $ref: '#/components/schemas/MeetingType'
        expiration:
          description: 'This field is only used for scheduled meetings to indicate when the meeting will
            no more be necessary'
          type: string
          format: date-time
      required:
        - name
        - meetingType
    JoinMeetingResult:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/JoinStatus'
    QueuedUsers:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
            format: uuid
    Room:
      type: object
      description: Room data for a meeting
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: room identifier
        type:
          $ref: "../chats/chats-api.yaml#/components/schemas/RoomType"
        name:
          type: string
          readOnly: true
          description: room name
        description:
          type: string
          description: room description
          readOnly: true
    MeetingUser:
      type: object
      description: Defines a user in the access list of a meeting
      properties:
        userId:
          type: string
          format: uuid
          description: user identifier
        userType:
          $ref: '#/components/schemas/MeetingUserType'
    MeetingType:
      type: string
      description: 'Defines the type of meeting, if permanent it will never be automatically deleted,
                if scheduled it will be removed after the expiration is passed'
      enum:
        - permanent
        - scheduled
    MeetingUserType:
      type: string
      enum:
        - moderator
        - registered
    QueueUpdateStatus:
      type: string
      enum:
        - ACCEPTED
        - REJECTED
    JoinStatus:
      type: string
      enum:
        - ACCEPTED
        - WAITING
    Participant:
      description: Meeting participant data
      allOf:
        - $ref: '#/components/schemas/MeetingUser'
        - type: object
          properties:
            queueId:
              type: string
              readOnly: true
              description: Reference to the user queue of the user
            audioStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the audio stream status
            videoStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the video stream status
            screenStreamEnabled:
              type: boolean
              readOnly: true
              description: indicates the screen share stream status
            joinedAt:
              type: string
              format: date-time
              readOnly: true
              description: participant joining timestamp
    Meeting:
      type: object
      description: Meeting data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: meeting identifier
        name:
          type: string
          description: The meeting name
        roomId:
          type: string
          format: uuid
          readOnly: true
          description: room identifier
        active:
          description: Indicates if the meeting is active
          type: boolean
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: entity creation date
        meetingType:
          $ref: '#/components/schemas/MeetingType'
    PublicMeeting:
      type: object
      description: public Meeting data
      properties:
        name:
          type: string
          description: the Meeting name
    JoinSettings:
      type: object
      description: user's streams settings to join a meeting
      properties:
        audioStreamEnabled:
          type: boolean
          default: false
          description: indicates the audio stream status to join the meeting
        videoStreamEnabled:
          type: boolean
          default: false
          description: indicates the video stream status to join the meeting
      required: [ audioStreamEnabled, videoStreamEnabled ]
    MediaStreamSettings:
      type: object
      description: settings to apply on user's media stream
      properties:
        type:
          type: string
          description: indicates the media stream type
          enum:
            - video
            - screen
        enabled:
          type: boolean
          description: indicates the status to change the media stream to
        sdp:
          type: string
          description: indicates the descriptor of the session
      required: [ type, enabled ]
    AudioStreamSettings:
      type: object
      description: settings to apply on user's audio stream
      properties:
        enabled:
          type: boolean
          description: indicates the status to change the audio stream to
        userToModerate:
          type: string
          description: optional user to mute if i'm a moderator, only works if enabled is false
      required: [ enabled ]
    SessionDescriptionProtocol:
      type: object
      description: contains sdp descriptor needed for a media stream to perform WebRTC negotiation
      properties:
        sdp:
          type: string
          description: indicates the descriptor of the session
      required: [ sdp ]
    SubscriptionUpdates:
      type: object
      description: subscriptions updates related to media streams
      properties:
        subscribe:
          type: array
          description: indicates the media streams which user wants to subscribe to
          items:
            $ref: '#/components/schemas/MediaStream'
        unsubscribe:
          type: array
          description: indicates the media streams which user wants to unsubscribe to
          items:
            $ref: '#/components/schemas/MediaStream'
      required: [ subscribe, unsubscribe ]
    MediaStream:
      type: object
      description: representation of meeting media stream
      properties:
        userId:
          type: string
          description: user identifier which owns the related media stream
        type:
          type: string
          description: indicates the media stream type
          enum:
            - video
            - screen
      required: [ userId, type ]
    QueuedUserUpdate:
      type: object
      description: Queued user update data
      properties:
        status:
          $ref: '#/components/schemas/QueueUpdateStatus'
