package {{package}};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
{{#imports}}
import {{import}};
{{/imports}}
import javax.annotation.Generated;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.*;
import javax.inject.Inject;

{{#useBeanValidation}}
import javax.validation.constraints.*;
import javax.validation.Valid;
{{/useBeanValidation}}
{{#operations}}{{#operation}}{{#isMultipart}}import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;
{{/isMultipart}}{{/operation}}{{/operations}}
@Path("{{commonPath}}")
{{#hasConsumes}}
@Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} })
{{/hasConsumes}}
{{#hasProduces}}
@Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} })
{{/hasProduces}}
@Api(description = "the {{{baseName}}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}  {

  private final {{classname}}Service service;

  @Inject
  public {{classname}} ({{classname}}Service service) {
    this.service = service;
  }
  {{#operation}}

  @{{httpMethod}}
  {{#subresourceOperation}}
  @Path("{{{path}}}")
  {{/subresourceOperation}}
  {{#hasConsumes}}
  @Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} })
  {{/hasConsumes}}
  {{#hasProduces}}
  @Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} })
  {{/hasProduces}}
  @ApiOperation(value = "{{{summary}}}", {{#notes}}notes = "{{{notes}}}", {{/notes}}{{^vendorExtensions.x-java-is-response-void}}response = {{{returnBaseType}}}.class{{#returnContainer}}, responseContainer = "{{{.}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
  {{#authMethods}}@io.swagger.annotations.Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
  {{#scopes}}@io.swagger.annotations.AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{^-last}},
  {{/-last}}{{/scopes}}
  }{{/isOAuth}}){{^-last}},
  {{/-last}}{{/authMethods}}
  }{{/hasAuthMethods}}, {{/vendorExtensions.x-java-is-response-void}}tags = { {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} })
  @ApiResponses(value = { {{#responses}}
    @ApiResponse(code = {{{code}}}, message = "{{{message}}}"{{^vendorExtensions.x-java-is-response-void}}, response = {{{baseType}}}.class{{#containerType}}, responseContainer = "{{{.}}}"{{/containerType}}{{/vendorExtensions.x-java-is-response-void}}){{^-last}},{{/-last}}{{/responses}}
  })
  public Response {{nickname}}({{#isMultipart}}MultipartFormDataInput input, {{/isMultipart}}{{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{^isMultipart}}{{>formParams}}, {{/isMultipart}}{{#isMultipart}}{{^isFormParam}}, {{/isFormParam}}{{/isMultipart}}{{/allParams}}@Context SecurityContext securityContext) {
    {{#vendorExtensions.x-java-is-response-void}}
    service.{{nickname}}({{#isMultipart}}input, {{/isMultipart}}{{#allParams}}{{^isMultipart}}{{paramName}}, {{/isMultipart}}{{#isMultipart}}{{^isFormParam}}{{paramName}}, {{/isFormParam}}{{/isMultipart}}{{/allParams}}securityContext);
    {{/vendorExtensions.x-java-is-response-void}}
    return Response.status({{{responses.0.code}}}){{^vendorExtensions.x-java-is-response-void}}.entity(service.{{nickname}}({{#isMultipart}}input, {{/isMultipart}}{{#allParams}}{{^isMultipart}}{{paramName}}, {{/isMultipart}}{{#isMultipart}}{{^isFormParam}}{{paramName}}, {{/isFormParam}}{{/isMultipart}}{{/allParams}}securityContext)){{/vendorExtensions.x-java-is-response-void}}.build();
  }
  {{/operation}}
}
{{/operations}}